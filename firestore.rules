rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /challenges/{challenge} {
      allow get: if request.auth.uid != null;
      allow list: if false;
    }
    match /challenges/{challenge} {
      allow create: if request.auth.uid != null;
      allow update: if request.auth.uid != null;
      allow delete: if request.auth.uid == challenge.owner;
    }
    match /challenges/{challenge}/users/{user} {
      allow get: if request.auth.uid in get(/databases/$(database)/documents/challenges/$(challenge)).data.participants;
      allow list: if request.auth.uid in get(/databases/$(database)/documents/challenges/$(challenge)).data.participants;
    }
    match /challenges/{challenge}/users/{user} {
      allow create: if request.auth.uid in get(/databases/$(database)/documents/challenges/$(challenge)).data.participants;
      allow update: if request.auth.uid == user;
      allow delete: if request.auth.uid == user;
    }
    match /users/{user} {
      allow get: if request.auth.uid == user;
      allow list: if false;
    }
    match /users/{user} {
      allow create: if request.auth.uid == user;
      allow update: if request.auth.uid == user;
      allow delete: if request.auth.uid == user;
    }
    match /challengeModels/{id} {
      allow get: if request.auth.uid != null;
      allow list: if false;
    }
    match /challengeModels/{id} {
      allow create: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      allow update: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      allow delete: if exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}
